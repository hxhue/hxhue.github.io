<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on Bluegill</title><link>https://hxhue.github.io/tags/rust/</link><description>Recent content in Rust on Bluegill</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 08 Apr 2024 00:00:00 +0800</lastBuildDate><atom:link href="https://hxhue.github.io/tags/rust/rss.xml" rel="self" type="application/rss+xml"/><item><title>Rust 程序设计语言 第一印象</title><link>https://hxhue.github.io/posts/programming/rust/Rust-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80-%E7%AC%AC%E4%B8%80%E5%8D%B0%E8%B1%A1/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/programming/rust/Rust-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80-%E7%AC%AC%E4%B8%80%E5%8D%B0%E8%B1%A1/</guid><description>&lt;p>首先看这个：&lt;/p>
&lt;p>






&lt;img src="https://hxhue.github.io/assets/fee648949a294fc8593f0a4dbbef67b1.webp">&lt;/p>
&lt;p>C++中在 C++14 之后可以使用 &lt;code>'&lt;/code> 来分隔数字字面量。而 Java 和 Rust 在设计阶段很早的时候就支持了用 &lt;code>_&lt;/code> 来分隔数字。&lt;/p>
&lt;p>个人感受：&lt;/p>
&lt;ul>
&lt;li>处处充斥强制移动语义。相关的是 Drop Trait，而基本类型还实现了 Copy Trait。（所有权和 C++ RAII 想要解决的问题相似）&lt;/li>
&lt;li>默认定义是常量，包括引用默认是常引用。（和 C++ 相反）&lt;/li>
&lt;li>允许同一个作用域内 shadow，试图把变量名当成真正的标签来用（类似 Python）。&lt;/li>
&lt;li>错误处理用 expect，比 try-catch 简洁。&lt;/li>
&lt;li>内置元组和 range、if 条件不需要加括号。&lt;/li>
&lt;li>很多实用包都得用 crate，在标准库中没提供……&lt;/li>
&lt;/ul>
&lt;h1 id="认识所有权">认识所有权
&lt;a class="header-anchor" href="#%e8%ae%a4%e8%af%86%e6%89%80%e6%9c%89%e6%9d%83">&lt;/a>
&lt;/h1>&lt;p>同一生存期，对对象 A 的可变引用将排斥任何对对象 A 的其他引用。当且仅当所有引用都是常量引用时编译才能够通过。一个引用的作用域从声明的地方开始一直持续到最后一次使用为止。编译器能够把这一点检查出来。如果最后一次使用结束了，就不参与和其他引用的排斥行为了。&lt;/p></description></item></channel></rss>