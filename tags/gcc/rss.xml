<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gcc on Bluegill</title><link>https://hxhue.github.io/tags/gcc/</link><description>Recent content in Gcc on Bluegill</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://hxhue.github.io/tags/gcc/rss.xml" rel="self" type="application/rss+xml"/><item><title>GCC 的 -fno-plt 选项</title><link>https://hxhue.github.io/01-llm-generated/GCC-%E7%9A%84-fno-plt-%E9%80%89%E9%A1%B9/</link><pubDate>Fri, 04 Apr 2025 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/01-llm-generated/GCC-%E7%9A%84-fno-plt-%E9%80%89%E9%A1%B9/</guid><description>&lt;div class="markdown-alert markdown-alert-caution">
 &lt;p class="markdown-alert-title">&lt;svg class="octicon octicon-stop mr-2" viewBox="0 0 16 16" width="16" height="16"
 aria-hidden="true">
 &lt;path
 d="M4.47.22A.749.749 0 0 1 5 0h6c.199 0 .389.079.53.22l4.25 4.25c.141.14.22.331.22.53v6a.749.749 0 0 1-.22.53l-4.25 4.25A.749.749 0 0 1 11 16H5a.749.749 0 0 1-.53-.22L.22 11.53A.749.749 0 0 1 0 11V5c0-.199.079-.389.22-.53Zm.84 1.28L1.5 5.31v5.38l3.81 3.81h5.38l3.81-3.81V5.31L10.69 1.5ZM8 4a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 4Zm0 8a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z">
 &lt;/path>
 &lt;/svg>Caution&lt;/p>
 &lt;p>由 gemini-2.5-pro-exp-03-25 生成。&lt;/p>
&lt;/div>&lt;h1 id="gcc-的--fno-plt-是什么含义">gcc 的 &lt;code>-fno-plt&lt;/code> 是什么含义？
&lt;a class="header-anchor" href="#gcc-%e7%9a%84--fno-plt-%e6%98%af%e4%bb%80%e4%b9%88%e5%90%ab%e4%b9%89">&lt;/a>
&lt;/h1>&lt;p>&lt;code>-fno-plt&lt;/code> 是 GCC 编译器的一个选项，它与程序如何处理函数调用相关，特别是对共享库函数的调用。&lt;/p></description></item><item><title>GNU 扩展语法：带有返回值的多语句表达式</title><link>https://hxhue.github.io/posts/programming/cpp/GNU-%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95%E5%B8%A6%E6%9C%89%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%A4%9A%E8%AF%AD%E5%8F%A5%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link><pubDate>Sat, 13 Jul 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/programming/cpp/GNU-%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95%E5%B8%A6%E6%9C%89%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%A4%9A%E8%AF%AD%E5%8F%A5%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid><description>&lt;p>&lt;a href="https://godbolt.org/z/vo195MYGj" title="https://godbolt.org/z/vo195MYGj" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://godbolt.org/z/vo195MYGj&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dc322f">int&lt;/span> &lt;span style="color:#268bd2">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">return&lt;/span> ({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2aa198">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上代码返回 1。在花括号中写多条语句都没关系。&lt;/p></description></item><item><title>为什么用 tar.gz 安装的共享库 gcc 找不到？</title><link>https://hxhue.github.io/posts/systems/Linux/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8-tar.gz-%E5%AE%89%E8%A3%85%E7%9A%84%E5%85%B1%E4%BA%AB%E5%BA%93-gcc-%E6%89%BE%E4%B8%8D%E5%88%B0/</link><pubDate>Fri, 28 Jun 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/systems/Linux/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8-tar.gz-%E5%AE%89%E8%A3%85%E7%9A%84%E5%85%B1%E4%BA%AB%E5%BA%93-gcc-%E6%89%BE%E4%B8%8D%E5%88%B0/</guid><description>&lt;h1 id="情况">情况
&lt;a class="header-anchor" href="#%e6%83%85%e5%86%b5">&lt;/a>
&lt;/h1>&lt;p>项目是由 CMake 构建的动态库，用 CPack 我们打包得到了一个 deb 包版本和一个 tar.gz 的压缩包版本。前者安装之后 demo 能够正常编译运行，但是在换用压缩包安装共享库后编译 demo 则出现了找不到库的错误（这里讨论的是非标准路径的情况，即安装路径不在 &lt;code>/&lt;/code>、&lt;code>/usr&lt;/code> 和 &lt;code>/usr/local&lt;/code> 下）。&lt;/p></description></item><item><title>GCC optimize-sibling-calls 的反向优化</title><link>https://hxhue.github.io/compiler-explorer-experiments/2024-04-20-GCC-optimize-sibling-calls-%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%98%E5%8C%96/</link><pubDate>Sat, 20 Apr 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/compiler-explorer-experiments/2024-04-20-GCC-optimize-sibling-calls-%E7%9A%84%E5%8F%8D%E5%90%91%E4%BC%98%E5%8C%96/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">#include&lt;/span> &lt;span style="color:#719e07">&amp;lt;benchmark/benchmark.h&amp;gt;&lt;/span>&lt;span style="color:#719e07">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">&lt;/span>&lt;span style="color:#719e07">static&lt;/span> &lt;span style="color:#268bd2">inline&lt;/span> &lt;span style="color:#719e07">constexpr&lt;/span> &lt;span style="color:#dc322f">int&lt;/span> FIBONACCI_N &lt;span style="color:#719e07">=&lt;/span> &lt;span style="color:#2aa198">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dc322f">int&lt;/span> &lt;span style="color:#268bd2">fib&lt;/span>(&lt;span style="color:#dc322f">int&lt;/span> n) { &lt;span style="color:#719e07">return&lt;/span> n &lt;span style="color:#719e07">&amp;lt;&lt;/span> &lt;span style="color:#2aa198">2&lt;/span> &lt;span style="color:#719e07">?&lt;/span> n : fib(n &lt;span style="color:#719e07">-&lt;/span> &lt;span style="color:#2aa198">1&lt;/span>) &lt;span style="color:#719e07">+&lt;/span> fib(n &lt;span style="color:#719e07">-&lt;/span> &lt;span style="color:#2aa198">2&lt;/span>); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">static&lt;/span> &lt;span style="color:#dc322f">void&lt;/span> &lt;span style="color:#268bd2">BM_fib&lt;/span>(benchmark&lt;span style="color:#719e07">::&lt;/span>State &lt;span style="color:#719e07">&amp;amp;&lt;/span>state) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">for&lt;/span> (&lt;span style="color:#719e07">auto&lt;/span> _ : state) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#dc322f">int&lt;/span> res &lt;span style="color:#719e07">=&lt;/span> fib(FIBONACCI_N);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> benchmark&lt;span style="color:#719e07">::&lt;/span>DoNotOptimize(res);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BENCHMARK(BM_fib);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dc322f">int&lt;/span> x; &lt;span style="color:#586e75">// Magic line.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">&lt;/span> &lt;span style="color:#586e75">// clang does not use DP anymore: much slower.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">&lt;/span> &lt;span style="color:#586e75">// gcc chooses a different optimizing approach: much faster.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dc322f">int&lt;/span> &lt;span style="color:#268bd2">fib_x&lt;/span>(&lt;span style="color:#dc322f">int&lt;/span> n) { &lt;span style="color:#719e07">return&lt;/span> n &lt;span style="color:#719e07">&amp;lt;&lt;/span> &lt;span style="color:#2aa198">2&lt;/span> &lt;span style="color:#719e07">?&lt;/span> n : fib_x(n &lt;span style="color:#719e07">-&lt;/span> &lt;span style="color:#2aa198">1&lt;/span>) &lt;span style="color:#719e07">+&lt;/span> fib_x(n &lt;span style="color:#719e07">-&lt;/span> &lt;span style="color:#2aa198">2&lt;/span>) &lt;span style="color:#719e07">+&lt;/span> x; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">static&lt;/span> &lt;span style="color:#dc322f">void&lt;/span> &lt;span style="color:#268bd2">BM_fib_x&lt;/span>(benchmark&lt;span style="color:#719e07">::&lt;/span>State &lt;span style="color:#719e07">&amp;amp;&lt;/span>state) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">for&lt;/span> (&lt;span style="color:#719e07">auto&lt;/span> _ : state) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#dc322f">int&lt;/span> res &lt;span style="color:#719e07">=&lt;/span> fib_x(FIBONACCI_N);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> benchmark&lt;span style="color:#719e07">::&lt;/span>DoNotOptimize(res);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BENCHMARK(BM_fib_x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BENCHMARK_MAIN();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译条件：GCC 13.2 -O2 -std=c++17&lt;/p></description></item></channel></rss>