<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Libstdcxx on Bluegill</title><link>https://hxhue.github.io/tags/libstdcxx/</link><description>Recent content in Libstdcxx on Bluegill</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 19 Apr 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://hxhue.github.io/tags/libstdcxx/rss.xml" rel="self" type="application/rss+xml"/><item><title>libstdc++ 和 libc++ 中字符串倍增比较</title><link>https://hxhue.github.io/posts/programming/cpp/libstdc++-%E5%92%8C-libc++-%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%80%8D%E5%A2%9E%E6%AF%94%E8%BE%83/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/programming/cpp/libstdc++-%E5%92%8C-libc++-%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%80%8D%E5%A2%9E%E6%AF%94%E8%BE%83/</guid><description>&lt;p>&lt;a href="https://godbolt.org/z/n8hns47M8" title="https://godbolt.org/z/n8hns47M8" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://godbolt.org/z/n8hns47M8&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">#include&lt;/span> &lt;span style="color:#719e07">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#719e07">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">#include&lt;/span> &lt;span style="color:#719e07">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#719e07">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dc322f">int&lt;/span> &lt;span style="color:#268bd2">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>string str &lt;span style="color:#719e07">=&lt;/span> &lt;span style="color:#2aa198">&amp;#34;hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;String: &lt;/span>&lt;span style="color:#cb4b16">\&amp;#34;&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;&lt;/span>&lt;span style="color:#cb4b16">\&amp;#34;&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Length: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str.&lt;span style="color:#268bd2">length&lt;/span>() &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Capacity: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str.&lt;span style="color:#268bd2">capacity&lt;/span>() &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Size: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#719e07">sizeof&lt;/span>(str) &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> str &lt;span style="color:#719e07">+=&lt;/span> &lt;span style="color:#2aa198">&amp;#34; world!。。。。&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;&lt;/span>&lt;span style="color:#cb4b16">\n&lt;/span>&lt;span style="color:#2aa198">String: &lt;/span>&lt;span style="color:#cb4b16">\&amp;#34;&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;&lt;/span>&lt;span style="color:#cb4b16">\&amp;#34;&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Length: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str.&lt;span style="color:#268bd2">length&lt;/span>() &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Capacity: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str.&lt;span style="color:#268bd2">capacity&lt;/span>() &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Size: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#719e07">sizeof&lt;/span>(str) &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> str &lt;span style="color:#719e07">+=&lt;/span> str;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;&lt;/span>&lt;span style="color:#cb4b16">\n&lt;/span>&lt;span style="color:#2aa198">String: &lt;/span>&lt;span style="color:#cb4b16">\&amp;#34;&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;&lt;/span>&lt;span style="color:#cb4b16">\&amp;#34;&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Length: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str.&lt;span style="color:#268bd2">length&lt;/span>() &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Capacity: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str.&lt;span style="color:#268bd2">capacity&lt;/span>() &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Size: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#719e07">sizeof&lt;/span>(str) &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">return&lt;/span> &lt;span style="color:#2aa198">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到 libstdc++ 中的 capacity 的增长方式是 15 → 30 → 60。一开始 SSO 缓冲区只能容纳 16 个字符，最后一个字符是 &lt;code>'\0'&lt;/code>，因此初始状态下只能容纳 15 个非空字符，capacity 为 15。而后面倍增的时候会直接按照非 &lt;code>'\0'&lt;/code> 字符的最大容量来做倍增，而非按照实际缓冲区容量做倍增（即 15 → 31 → 63 这样的路径）。&lt;/p></description></item><item><title>libstdc++ enable_shared_from_this 源码分析</title><link>https://hxhue.github.io/posts/programming/cpp/libstdc++-enable_shared_from_this-%E6%BA%90%E7%A0%81/</link><pubDate>Fri, 07 Feb 2025 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/programming/cpp/libstdc++-enable_shared_from_this-%E6%BA%90%E7%A0%81/</guid><description>&lt;p>继承 &lt;code>std::enable_shared_from_this&lt;/code> 模板类之后就多了一个弱指针（&lt;code>_M_weak_this&lt;/code>）。同时还多了一个 &lt;code>__enable_shared_from_this_base&lt;/code> 方法，创建共享指针时该方法能被 ADL 找到，以关联和共享控制块。该方法是私有的，不过 &lt;code>__shared_ptr&amp;lt;typename, typename&amp;gt;&lt;/code> 是友元类，因此能访问它。&lt;/p></description></item><item><title>5.0.2 阅读 libstdc++ 中原子变量 wait 和 notify 接口</title><link>https://hxhue.github.io/cpp-concurrency-in-action/5.0.2-%E9%98%85%E8%AF%BB-libstdc++-%E4%B8%AD%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F-wait-%E5%92%8C-notify-%E6%8E%A5%E5%8F%A3/</link><pubDate>Fri, 24 Jan 2025 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/cpp-concurrency-in-action/5.0.2-%E9%98%85%E8%AF%BB-libstdc++-%E4%B8%AD%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F-wait-%E5%92%8C-notify-%E6%8E%A5%E5%8F%A3/</guid><description>&lt;h1 id="wait-和-notify-接口介绍">Wait 和 notify 接口介绍
&lt;a class="header-anchor" href="#wait-%e5%92%8c-notify-%e6%8e%a5%e5%8f%a3%e4%bb%8b%e7%bb%8d">&lt;/a>
&lt;/h1>&lt;p>&lt;code>std::atomic&amp;lt;T&amp;gt;::wait&lt;/code> 用来等待原子变量值的改变，如果原子变量值和给定的参数 old 相同则阻塞，直到被 &lt;code>notify_all()&lt;/code> 或者 &lt;code>notify_one()&lt;/code> 通知，或者&lt;strong>自发地解除阻塞&lt;/strong>。因此用 &lt;code>wait&lt;/code> 要在循环中使用。&lt;/p></description></item><item><title>5.1 libstdc++ 对共享指针原子操作的支持</title><link>https://hxhue.github.io/cpp-concurrency-in-action/5.1-libstdc++-%E5%AF%B9%E5%85%B1%E4%BA%AB%E6%8C%87%E9%92%88%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%9A%84%E6%94%AF%E6%8C%81/</link><pubDate>Sun, 05 Jan 2025 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/cpp-concurrency-in-action/5.1-libstdc++-%E5%AF%B9%E5%85%B1%E4%BA%AB%E6%8C%87%E9%92%88%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%9A%84%E6%94%AF%E6%8C%81/</guid><description>&lt;h1 id="引言">引言
&lt;a class="header-anchor" href="#%e5%bc%95%e8%a8%80">&lt;/a>
&lt;/h1>&lt;p>这篇笔记是承接 
 
 
 
 
 
 
 
 
 
 
 
 
 
 &lt;a href="https://hxhue.github.io/cppcon-talks/CppCon-2023-Lock-free-Atomic-Shared-Pointers-Without-a-Split-Reference-Count/" title="CppCon 2023 Lock-free Atomic Shared Pointers Without a Split Reference Count" >CppCon 2023 Lock-free Atomic Shared Pointers Without a Split Reference Count&lt;/a> 和 
 
 
 
 
 
 
 
 
 
 
 
 
 
 &lt;a href="https://hxhue.github.io/cpp-concurrency-in-action/5.-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E6%A0%87%E5%87%86%E5%8E%9F%E5%AD%90%E7%B1%BB%E5%9E%8B%E8%87%AA%E6%97%8B%E9%94%81/" title="内存模型基础、标准原子类型、自旋锁" >内存模型基础、标准原子类型、自旋锁&lt;/a> 来写的。&lt;/p>
&lt;p>C++20 有 &lt;a href="https://en.cppreference.com/w/cpp/memory/shared_ptr/atomic2" title="std::atomic&amp;lt;std::shared_ptr&amp;gt;" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >&lt;code>std::atomic&amp;lt;std::shared_ptr&amp;gt;&lt;/code>&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a> 和 &lt;a href="https://en.cppreference.com/w/cpp/memory/weak_ptr/atomic2" title="std::atomic&amp;lt;std::weak_ptr&amp;gt;" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >&lt;code>std::atomic&amp;lt;std::weak_ptr&amp;gt;&lt;/code>&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a> 的偏特化，之前连这两个偏特化都没有，因而会编译错误（&lt;code>std::atomic&lt;/code> requires a trivially copyable type），只能使用对共享指针提供的&lt;strong>原子操作自由函数&lt;/strong>（&lt;code>std::atomic_*&lt;/code>）。但是这样的类型并不是无锁的，可以通过 &lt;code>is_lock_free()&lt;/code> 的返回值看出来，见 &lt;a href="https://godbolt.org/z/b5P84jM9f" title="https://godbolt.org/z/b5P84jM9f" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://godbolt.org/z/b5P84jM9f&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a> 。根据 Daniel&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> 的幻灯片，MSVC 和 libstdc++ 中这两个类型都是有锁；根据我的查证，libc++ 截至 2025 年 1 月 5 日还没有实现这两个偏特化。&lt;/p></description></item><item><title>GCC7 `std::atomic::is_lock_free` 的变化</title><link>https://hxhue.github.io/cpp-concurrency-in-action/5.0.1-GCC7-std-atomic-is_lock_free-%E7%9A%84%E5%8F%98%E5%8C%96/</link><pubDate>Sun, 29 Dec 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/cpp-concurrency-in-action/5.0.1-GCC7-std-atomic-is_lock_free-%E7%9A%84%E5%8F%98%E5%8C%96/</guid><description>&lt;h1 id="gcc7-不再认为-x86-上的-16-字节原子变量无锁">GCC7 不再认为 x86 上的 16 字节原子变量无锁
&lt;a class="header-anchor" href="#gcc7-%e4%b8%8d%e5%86%8d%e8%ae%a4%e4%b8%ba-x86-%e4%b8%8a%e7%9a%84-16-%e5%ad%97%e8%8a%82%e5%8e%9f%e5%ad%90%e5%8f%98%e9%87%8f%e6%97%a0%e9%94%81">&lt;/a>
&lt;/h1>&lt;p>原因：GCC7 开始在 &lt;code>std::atomic&amp;lt;T&amp;gt;::is_always_lock_free&lt;/code> 不满足时会调用 libatomic 的 &lt;code>__atomic_is_lock_free()&lt;/code> 函数，但是 libatomic 对无锁的内涵理解不同。&lt;/p>
&lt;p>&lt;a href="https://godbolt.org/z/nc34E716Y" title="https://godbolt.org/z/nc34E716Y" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://godbolt.org/z/nc34E716Y&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a> 这里表明 gcc7 处理 &lt;code>is_lock_free&lt;/code> 的行为发生了变化，即便有了 &lt;code>-mcx16&lt;/code> 编译选项，也不认为 16 字节原子变量是无锁的，gcc6 则认为 16 字节原子变量在对齐满足时是无锁的（无论 &lt;code>-mcx16&lt;/code> 标志是否存在）。Clang 则是在有无 &lt;code>-mcx16&lt;/code> 选项时呈现出不同的结果。GitHub 上有个相关的 &lt;a href="https://github.com/msys2/MINGW-packages/issues/13831" title="讨论" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >讨论&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a> 。简单来说是 gcc7 之后不会直接通过当前编译架构来直接决定一个类型是否无锁（clang 会），而是将这个逻辑转移到对 libatomic 的函数的调用上，而 libatomic 认为 16 字节原子变量在 x86 上不算无锁。&lt;/p></description></item><item><title>libstdc++ 中 std::shared_ptr 的内存开销</title><link>https://hxhue.github.io/posts/programming/cpp/libstdc++-%E4%B8%AD-shared_ptr-%E7%9A%84%E5%86%85%E5%AD%98%E5%BC%80%E9%94%80/</link><pubDate>Tue, 27 Aug 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/programming/cpp/libstdc++-%E4%B8%AD-shared_ptr-%E7%9A%84%E5%86%85%E5%AD%98%E5%BC%80%E9%94%80/</guid><description>&lt;h1 id="stdshared_ptrt-的内存开销">&lt;code>std::shared_ptr&amp;lt;T&amp;gt;&lt;/code> 的内存开销
&lt;a class="header-anchor" href="#stdshared_ptrt-%e7%9a%84%e5%86%85%e5%ad%98%e5%bc%80%e9%94%80">&lt;/a>
&lt;/h1>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>std&lt;span style="color:#719e07">::&lt;/span>shared_ptr&lt;span style="color:#719e07">&amp;lt;&lt;/span>T&lt;span style="color:#719e07">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> element_type&lt;span style="color:#719e07">*&lt;/span>    _M_ptr; &lt;span style="color:#586e75">// Contained pointer. sizeof(intptr_t) 字节
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">&lt;/span> __shared_count&lt;span style="color:#719e07">&amp;lt;&lt;/span>_Lp&lt;span style="color:#719e07">&amp;gt;&lt;/span>  _M_refcount; &lt;span style="color:#586e75">// Reference counter. sizeof(intptr_t) 字节
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">&lt;/span> _Sp_counted_base&lt;span style="color:#719e07">&amp;lt;&lt;/span>_Lp&lt;span style="color:#719e07">&amp;gt;*&lt;/span>  _M_pi;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>std&lt;span style="color:#719e07">::&lt;/span>_Sp_counted_base&lt;span style="color:#719e07">&amp;lt;&lt;/span>__default_lock_policy&lt;span style="color:#719e07">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#586e75">// vtable pointer // sizeof(intptr_t) 字节
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">&lt;/span> _Atomic_word  _M_use_count;     &lt;span style="color:#586e75">// #shared 4 字节，实际上是 int 类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">&lt;/span> _Atomic_word  _M_weak_count;    &lt;span style="color:#586e75">// #weak + (#shared != 0) 4 字节
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，记录 use count 是为了判断什么时候可以释放共享指针指向的对象；记录 weak count 是为了判断什么时候可以安全释放控制块本身。即便是共享指针指向对象已经被释放（use count 归零），也可能有弱指针会尝试转换成共享指针，因此应该保证这些弱指针能安全查询控制块。还有一点，如果用 &lt;code>std::make_shared&lt;/code> 创建共享指针，use count 归零而 weak count 不归零时，共享对象只是被析构，其内存会等到 weak count 归零时一起被释放。可以参考 &lt;a href="https://stackoverflow.com/a/49585948/" title="https://stackoverflow.com/a/49585948/" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://stackoverflow.com/a/49585948/&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a> 。&lt;/p></description></item><item><title>libc++ 和 libstdc++ 中 basic_string 的 SSO 比较</title><link>https://hxhue.github.io/posts/programming/cpp/libc++-%E5%92%8C-libstdc++-%E4%B8%AD-basic_string-%E7%9A%84-SSO-%E6%AF%94%E8%BE%83/</link><pubDate>Sat, 13 Apr 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/programming/cpp/libc++-%E5%92%8C-libstdc++-%E4%B8%AD-basic_string-%E7%9A%84-SSO-%E6%AF%94%E8%BE%83/</guid><description>&lt;h1 id="参考">参考
&lt;a class="header-anchor" href="#%e5%8f%82%e8%80%83">&lt;/a>
&lt;/h1>&lt;p>&lt;a href="https://joellaity.com/2020/01/31/string.html" title="https://joellaity.com/2020/01/31/string.html" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://joellaity.com/2020/01/31/string.html&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a>&lt;/p>
&lt;p>&lt;code>std::string&lt;/code> 是 &lt;code>std::basic_string&amp;lt;&amp;gt;&lt;/code> 的一个特化，该类的 &lt;code>value_type&lt;/code> 是 char。本文虽然是讨论 &lt;code>std::basic_string&amp;lt;&amp;gt;&lt;/code> 的实现方式，但是为了方便，&lt;strong>假设 &lt;code>value_type&lt;/code> 是 &lt;code>char&lt;/code>、假设目标平台是 64 位&lt;/strong>，讨论时也将把 &lt;code>std::basic_string&amp;lt;&amp;gt;&lt;/code> 和 &lt;code>std::string&lt;/code> 互用。&lt;/p></description></item></channel></rss>