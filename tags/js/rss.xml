<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Js on Bluegill</title><link>https://hxhue.github.io/tags/js/</link><description>Recent content in Js on Bluegill</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Thu, 26 Oct 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://hxhue.github.io/tags/js/rss.xml" rel="self" type="application/rss+xml"/><item><title>使用 nodejs 启动文件服务器</title><link>https://hxhue.github.io/posts/systems/Linux/%E4%BD%BF%E7%94%A8-nodejs-%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Thu, 26 Oct 2023 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/systems/Linux/%E4%BD%BF%E7%94%A8-nodejs-%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt install nodejs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apt install npm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75"># 校内可用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm config &lt;span style="color:#b58900">set&lt;/span> registry xxx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install --global http-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认的 serve 路径是 &lt;code>./public&lt;/code>，如果找不到则使用 &lt;code>.&lt;/code> 这个路径。&lt;/p></description></item><item><title>不同语言闭包的捕获方式</title><link>https://hxhue.github.io/posts/unsorted/%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E9%97%AD%E5%8C%85%E7%9A%84%E6%8D%95%E8%8E%B7%E6%96%B9%E5%BC%8F/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/unsorted/%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E9%97%AD%E5%8C%85%E7%9A%84%E6%8D%95%E8%8E%B7%E6%96%B9%E5%BC%8F/</guid><description>&lt;h1 id="总览">总览
&lt;a class="header-anchor" href="#%e6%80%bb%e8%a7%88">&lt;/a>
&lt;/h1>&lt;ul>
&lt;li>C++ 根据在捕获列表中标注的方式进行捕获。&lt;/li>
&lt;li>Java 按照值捕获（而且 Java 在某些情况下还要求显式的 final 修饰符）。&lt;/li>
&lt;li>JavaScript：见 
 
 &lt;a href="https://hxhue.github.io/posts/unsorted/%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E9%97%AD%E5%8C%85%E7%9A%84%E6%8D%95%E8%8E%B7%E6%96%B9%E5%BC%8F#javascript-%e6%8d%95%e8%8e%b7" title="JavaScript 捕获" >JavaScript 捕获&lt;/a>。
&lt;ul>
&lt;li>注意：捕获和传值是不同的！例如：JavaScript 在函数参数传递时仍然时按照值传递。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Python/Go 按照引用捕获，for 循环不会创造新的作用域。&lt;/li>
&lt;/ul>
&lt;h1 id="javascript-捕获">JavaScript 捕获
&lt;a class="header-anchor" href="#javascript-%e6%8d%95%e8%8e%b7">&lt;/a>
&lt;/h1>&lt;p>看上去是引用捕获，但是 for 循环的 let 和 const 绑定会创造新的作用域。&lt;/p></description></item><item><title>Javascript Spread Operator</title><link>https://hxhue.github.io/posts/programming/www/Javascript-Spread-Operator/</link><pubDate>Wed, 06 Sep 2023 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/programming/www/Javascript-Spread-Operator/</guid><description>&lt;p>&lt;strong>&lt;code>{...a, ...b}&lt;/code> 相当于 &lt;code>Object.assign({}, a, b)&lt;/code>&lt;/strong>。&lt;code>Object.assign&lt;/code> 还能给已经存在的对象赋值，而且会触发 setter。Spread operator 是在创建对象，不会触发 setter。&lt;/p>
&lt;p>&lt;strong>&lt;code>[...a, ...b]&lt;/code> 相当于 &lt;code>a.concat(b)&lt;/code>&lt;/strong>。&lt;/p></description></item><item><title>Javascript 中的迭代：ArrayLike, Symbol.iterator……</title><link>https://hxhue.github.io/posts/programming/www/Javascript-%E4%B8%AD%E7%9A%84%E8%BF%AD%E4%BB%A3ArrayLike-Symbol.iterator/</link><pubDate>Wed, 06 Sep 2023 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/programming/www/Javascript-%E4%B8%AD%E7%9A%84%E8%BF%AD%E4%BB%A3ArrayLike-Symbol.iterator/</guid><description>&lt;h1 id="iterable">Iterable
&lt;a class="header-anchor" href="#iterable">&lt;/a>
&lt;/h1>&lt;p>&lt;code>Symbol.iterator&lt;/code> 是个特殊的键，属于 Iterator 规范的一部分。实现了 Iterable 接口的对象是可以用 spread operator 迭代的。&lt;/p>
&lt;h1 id="arraylike">ArrayLike
&lt;a class="header-anchor" href="#arraylike">&lt;/a>
&lt;/h1>&lt;p>有 &lt;code>length&lt;/code> 属性，且在 &lt;code>[0, length)&lt;/code> 范围内都可以访问的对象被称为 ArrayLike 的对象。ArrayLike 的对象可以使用诸如 &lt;code>Array.prototype.slice.call(obj, 2)&lt;/code> 的方式来作为 Array 调用。&lt;/p></description></item><item><title>Javascript's Hoisting（变量提升、函数提升、类提升）</title><link>https://hxhue.github.io/posts/programming/www/Javascripts-Hoisting%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87%E7%B1%BB%E6%8F%90%E5%8D%87/</link><pubDate>Mon, 21 Aug 2023 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/programming/www/Javascripts-Hoisting%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87%E7%B1%BB%E6%8F%90%E5%8D%87/</guid><description>&lt;h1 id="function-hoisting">Function hoisting
&lt;a class="header-anchor" href="#function-hoisting">&lt;/a>
&lt;/h1>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">const&lt;/span> callerArrow &lt;span style="color:#719e07">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">return&lt;/span> callee(); &lt;span style="color:#586e75">// 刚定义这个函数时，callee 的状态是：defined but uninitialized
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">&lt;/span> &lt;span style="color:#586e75">// 只要 callee 在调用这个函数之前初始化了就没有问题
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">// callee(); // 见不到定义，调用会出错
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">const&lt;/span> callee &lt;span style="color:#719e07">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#2aa198">&amp;#34;Hello from callee!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>callerArrow(); &lt;span style="color:#586e75">// callee 的定义出现了，可以调用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>calleeRegular();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">function&lt;/span> calleeRegular() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#2aa198">&amp;#34;Hello from calleeRegular!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在同一个词法定义域中的所有声明都是能被看见的。但如果声明是函数，则还能支持直接（向后）调用，即&lt;strong>函数提升&lt;/strong>规则。如果是箭头函数，则只能引用，不能调用。&lt;/p></description></item><item><title>Javascript 从 DOMNodeInserted 到 MutationObserver</title><link>https://hxhue.github.io/posts/programming/www/Javascript-%E4%BB%8E-DOMNodeInserted-%E5%88%B0-MutationObserver/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/programming/www/Javascript-%E4%BB%8E-DOMNodeInserted-%E5%88%B0-MutationObserver/</guid><description>&lt;p>这段代码是在 Tamper Monkey 的 content.js 中发现的。被浏览器警告应该替换掉这种写法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>bn.addEventListener(&lt;span style="color:#2aa198">&amp;#34;DOMNodeInserted&amp;#34;&lt;/span>, o, s)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>替换成&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">var&lt;/span> [adder, remover] &lt;span style="color:#719e07">=&lt;/span> ((bn, o, s) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">var&lt;/span> helper &lt;span style="color:#719e07">=&lt;/span> { remove &lt;span style="color:#719e07">:&lt;/span> () =&amp;gt; {}, add &lt;span style="color:#719e07">:&lt;/span> () =&amp;gt; {} }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">var&lt;/span> observer &lt;span style="color:#719e07">=&lt;/span> &lt;span style="color:#719e07">new&lt;/span> MutationObserver(&lt;span style="color:#268bd2">function&lt;/span>(mutations) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mutations.forEach(&lt;span style="color:#268bd2">function&lt;/span>(mutation) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">var&lt;/span> nodes &lt;span style="color:#719e07">=&lt;/span> &lt;span style="color:#b58900">Array&lt;/span>.prototype.slice.call(mutation.addedNodes);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodes.forEach((node_) =&amp;gt; { o(); helper.remove() });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> helper.remove &lt;span style="color:#719e07">=&lt;/span> () =&amp;gt; observer.disconnect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> helper.add &lt;span style="color:#719e07">=&lt;/span> () =&amp;gt; observer.observe(bn, { childList&lt;span style="color:#719e07">:&lt;/span> &lt;span style="color:#cb4b16">true&lt;/span>, subtree&lt;span style="color:#719e07">:&lt;/span> &lt;span style="color:#cb4b16">true&lt;/span>, };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">return&lt;/span> [helper.add, helper.remove];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})(bn, o, s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>adder()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>bn.removeEventListener(&lt;span style="color:#2aa198">&amp;#34;DOMNodeInserted&amp;#34;&lt;/span>, o, s)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>替换成&lt;/p></description></item></channel></rss>