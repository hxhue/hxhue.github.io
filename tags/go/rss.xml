<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Bluegill</title><link>https://hxhue.github.io/tags/go/</link><description>Recent content in Go on Bluegill</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Thu, 12 Oct 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://hxhue.github.io/tags/go/rss.xml" rel="self" type="application/rss+xml"/><item><title>不同语言闭包的捕获方式</title><link>https://hxhue.github.io/posts/unsorted/%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E9%97%AD%E5%8C%85%E7%9A%84%E6%8D%95%E8%8E%B7%E6%96%B9%E5%BC%8F/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/unsorted/%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E9%97%AD%E5%8C%85%E7%9A%84%E6%8D%95%E8%8E%B7%E6%96%B9%E5%BC%8F/</guid><description>&lt;h1 id="总览">总览
&lt;a class="header-anchor" href="#%e6%80%bb%e8%a7%88">&lt;/a>
&lt;/h1>&lt;ul>
&lt;li>C++ 根据在捕获列表中标注的方式进行捕获。&lt;/li>
&lt;li>Java 按照值捕获（而且 Java 在某些情况下还要求显式的 final 修饰符）。&lt;/li>
&lt;li>JavaScript：见 
 
 &lt;a href="https://hxhue.github.io/posts/unsorted/%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E9%97%AD%E5%8C%85%E7%9A%84%E6%8D%95%E8%8E%B7%E6%96%B9%E5%BC%8F#javascript-%e6%8d%95%e8%8e%b7" title="JavaScript 捕获" >JavaScript 捕获&lt;/a>。
&lt;ul>
&lt;li>注意：捕获和传值是不同的！例如：JavaScript 在函数参数传递时仍然时按照值传递。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Python/Go 按照引用捕获，for 循环不会创造新的作用域。&lt;/li>
&lt;/ul>
&lt;h1 id="javascript-捕获">JavaScript 捕获
&lt;a class="header-anchor" href="#javascript-%e6%8d%95%e8%8e%b7">&lt;/a>
&lt;/h1>&lt;p>看上去是引用捕获，但是 for 循环的 let 和 const 绑定会创造新的作用域。&lt;/p></description></item></channel></rss>