<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bash on Bluegill</title><link>https://hxhue.github.io/tags/bash/</link><description>Recent content in Bash on Bluegill</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 19 Jul 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://hxhue.github.io/tags/bash/rss.xml" rel="self" type="application/rss+xml"/><item><title>diff 两个文件夹</title><link>https://hxhue.github.io/posts/cli/bash/diff-%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9/</link><pubDate>Thu, 10 Jul 2025 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/cli/bash/diff-%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>diff -bur folderA/ folderB/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>-r&lt;/code> 表示递归，&lt;code>-b&lt;/code> 表示忽略空白字符，&lt;code>-u&lt;/code> 表示输出统一样式（也就是 git diff 常见的样式，会比默认样式容易阅读）。&lt;/p></description></item><item><title>2025-04-19 Microsoft Copilot 和 Windsurf 体验</title><link>https://hxhue.github.io/daily/2025-04-19-Microsoft-Copilot-%E5%92%8C-Windsurf-%E4%BD%93%E9%AA%8C/</link><pubDate>Sat, 19 Apr 2025 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/daily/2025-04-19-Microsoft-Copilot-%E5%92%8C-Windsurf-%E4%BD%93%E9%AA%8C/</guid><description>&lt;h1 id="开头">开头
&lt;a class="header-anchor" href="#%e5%bc%80%e5%a4%b4">&lt;/a>
&lt;/h1>&lt;p>今天在尝试 Microsoft Copilot 和 Windsurf。&lt;/p>
&lt;h1 id="microsoft-copilot-体验">Microsoft Copilot 体验
&lt;a class="header-anchor" href="#microsoft-copilot-%e4%bd%93%e9%aa%8c">&lt;/a>
&lt;/h1>&lt;p>参考 &lt;a href="https://linux.do/t/topic/480869/" title="https://linux.do/t/topic/480869/" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://linux.do/t/topic/480869/&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a> ，解读大模型官网和 IDE 的各种额度限制。里面提到了 Microsoft Copilot 使用了 GPT-4o 和 GPT-o3 mini，之前对 Microsoft Copilot 的感受是比较负面的，看到这个新消息后我也查找了对应的资料（有一说一，Microsoft Copilot 查资料还不如 Grok 做的好）：&lt;/p></description></item><item><title>bash 加载配置文件</title><link>https://hxhue.github.io/01-llm-generated/bash-%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%A1%BA%E5%BA%8F/</link><pubDate>Sat, 19 Apr 2025 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/01-llm-generated/bash-%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%A1%BA%E5%BA%8F/</guid><description>&lt;div class="markdown-alert markdown-alert-caution">
 &lt;p class="markdown-alert-title">&lt;svg class="octicon octicon-stop mr-2" viewBox="0 0 16 16" width="16" height="16"
 aria-hidden="true">
 &lt;path
 d="M4.47.22A.749.749 0 0 1 5 0h6c.199 0 .389.079.53.22l4.25 4.25c.141.14.22.331.22.53v6a.749.749 0 0 1-.22.53l-4.25 4.25A.749.749 0 0 1 11 16H5a.749.749 0 0 1-.53-.22L.22 11.53A.749.749 0 0 1 0 11V5c0-.199.079-.389.22-.53Zm.84 1.28L1.5 5.31v5.38l3.81 3.81h5.38l3.81-3.81V5.31L10.69 1.5ZM8 4a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 4Zm0 8a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z">
 &lt;/path>
 &lt;/svg>Caution&lt;/p>
 &lt;p>由 Gemini 2.5 Pro 生成。&lt;/p></description></item><item><title>bash 字符串操作</title><link>https://hxhue.github.io/posts/cli/bash/bash-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</link><pubDate>Fri, 27 Dec 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/cli/bash/bash-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</guid><description>&lt;h1 id="反转字符串">反转字符串
&lt;a class="header-anchor" href="#%e5%8f%8d%e8%bd%ac%e5%ad%97%e7%ac%a6%e4%b8%b2">&lt;/a>
&lt;/h1>&lt;p>将每行内部颠倒用 &lt;code>rev&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#b58900">printf&lt;/span> &lt;span style="color:#2aa198">&amp;#39;1234 5678\nABC abc\n&amp;#39;&lt;/span> | rev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198">8765&lt;/span> &lt;span style="color:#2aa198">4321&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cba CBA
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将不同行颠倒用 &lt;code>tac&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#b58900">printf&lt;/span> &lt;span style="color:#2aa198">&amp;#39;1234 5678\nABC abc\n&amp;#39;&lt;/span> | tac
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ABC abc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198">1234&lt;/span> &lt;span style="color:#2aa198">5678&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>bash 等待特定进程结束</title><link>https://hxhue.github.io/posts/cli/bash/bash-%E7%AD%89%E5%BE%85%E7%89%B9%E5%AE%9A%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9D%9F/</link><pubDate>Mon, 02 Sep 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/cli/bash/bash-%E7%AD%89%E5%BE%85%E7%89%B9%E5%AE%9A%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9D%9F/</guid><description>&lt;p>这是我写的某个测试的脚本：&lt;/p>
&lt;ol>
&lt;li>B 需要等待 A 程序先运行起来之后才能启动。&lt;/li>
&lt;li>A 退出之后，应该中止 B。&lt;/li>
&lt;li>代码能保证 B 不会在 A 之前中止。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./build/test/A -n &lt;span style="color:#2aa198">5000&lt;/span> &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">PROC_A&lt;/span>&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#268bd2">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sleep &lt;span style="color:#2aa198">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python test/B.py &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">PROC_B&lt;/span>&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#268bd2">$!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tail --pid&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#268bd2">$PROC_A&lt;/span> -f /dev/null
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">kill&lt;/span> &lt;span style="color:#268bd2">$PROC_B&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>tail --pid=$PROC_A -f /dev/null&lt;/code> 这一句是等待特定进程结束的关键。参考 &lt;a href="https://stackoverflow.com/questions/1058047/wait-for-a-process-to-finish" title="https://stackoverflow.com/questions/1058047/wait-for-a-process-to-finish" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://stackoverflow.com/questions/1058047/wait-for-a-process-to-finish&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a> 。&lt;/p></description></item><item><title>保存被终端转义后的文本</title><link>https://hxhue.github.io/posts/systems/Linux/Linux-%E4%BF%9D%E5%AD%98%E8%A2%AB%E7%BB%88%E7%AB%AF%E8%BD%AC%E4%B9%89%E5%90%8E%E7%9A%84%E6%96%87%E6%9C%AC/</link><pubDate>Mon, 02 Sep 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/systems/Linux/Linux-%E4%BF%9D%E5%AD%98%E8%A2%AB%E7%BB%88%E7%AB%AF%E8%BD%AC%E4%B9%89%E5%90%8E%E7%9A%84%E6%96%87%E6%9C%AC/</guid><description>&lt;h1 id="问题起因">问题起因
&lt;a class="header-anchor" href="#%e9%97%ae%e9%a2%98%e8%b5%b7%e5%9b%a0">&lt;/a>
&lt;/h1>&lt;p>我的某个程序会自己打印 &lt;code>\r&lt;/code> 和 &lt;code>\b&lt;/code> 字符以在终端上起到提示效果，但是如果将内容重定向到文件，那么显示出来效果就不好。在很多阅读器中特殊字符不能被正确显示，在 VS Code 中 &lt;code>\r&lt;/code> 会换行，而 &lt;code>\b&lt;/code> 也不会真正起到删除的作用。&lt;/p>
&lt;h1 id="方法-1cat-或者-less--r">方法 1：&lt;code>cat&lt;/code> 或者 &lt;code>less -r&lt;/code>
&lt;a class="header-anchor" href="#%e6%96%b9%e6%b3%95-1cat-%e6%88%96%e8%80%85-less--r">&lt;/a>
&lt;/h1>&lt;p>假设现在文件 A.log 中包含了大量 &lt;code>\r&lt;/code> 和 &lt;code>\b&lt;/code>，想要阅读它可以直接将其 &lt;code>cat&lt;/code> 到终端，或者使用 &lt;code>less -r A.log&lt;/code> 来阅读。&lt;strong>用 &lt;code>less -r&lt;/code> 是比较推荐的，因为还能用 &lt;code>/&lt;/code> 查找、用 &lt;code>&amp;amp;&lt;/code> 过滤&lt;/strong>。&lt;/p>
&lt;h1 id="方法-2col">方法 2：&lt;code>col&lt;/code>
&lt;a class="header-anchor" href="#%e6%96%b9%e6%b3%95-2col">&lt;/a>
&lt;/h1>&lt;p>如果想要真正保存一份和我们在终端看上去一样的文件，可以使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>col -b &amp;lt; A.log &amp;gt; A1.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>bash 搜索内置命令的帮助信息</title><link>https://hxhue.github.io/posts/cli/bash/bash-%E6%90%9C%E7%B4%A2%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4%E7%9A%84%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF/</link><pubDate>Sat, 31 Aug 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/cli/bash/bash-%E6%90%9C%E7%B4%A2%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4%E7%9A%84%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF/</guid><description>&lt;p>想要搜索 bash 内置命令的帮助信息，但是发现找不到，比如 &lt;code>man ulimit&lt;/code> 没有对应的页面，怎么办呢？&lt;/p>
&lt;p>其实和 bash 内置命令相关的帮助信息就在 bash 的 man 手册当中，可以用 &lt;code>man bash&lt;/code> 来查看。然后在弹出的 less 阅读器中，搜索 &lt;code>SHELL BUILTIN COMMANDS&lt;/code> 就能找到这一栏了（用小写就能搜索）。&lt;/p></description></item><item><title>查找 malloc 和 free 是否配对</title><link>https://hxhue.github.io/posts/cli/bash/bash-%E6%9F%A5%E6%89%BE-malloc-%E5%92%8C-free-%E6%98%AF%E5%90%A6%E9%85%8D%E5%AF%B9/</link><pubDate>Tue, 27 Aug 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/cli/bash/bash-%E6%9F%A5%E6%89%BE-malloc-%E5%92%8C-free-%E6%98%AF%E5%90%A6%E9%85%8D%E5%AF%B9/</guid><description>&lt;h1 id="说明">说明
&lt;a class="header-anchor" href="#%e8%af%b4%e6%98%8e">&lt;/a>
&lt;/h1>&lt;p>因为项目有老代码所以才需要这样处理，一般建议用 RAII 等技术避免裸露资源。&lt;/p>
&lt;h1 id="find_mallocsh">find_malloc.sh
&lt;a class="header-anchor" href="#find_mallocsh">&lt;/a>
&lt;/h1>&lt;p>要点：&lt;/p>
&lt;ol>
&lt;li>用 gcc 去除代码注释。&lt;/li>
&lt;li>用 awk 对正则表达式计数。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>check&lt;span style="color:#719e07">()&lt;/span> &lt;span style="color:#719e07">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gcc -fpreprocessed -dD -E -P &lt;span style="color:#2aa198">&amp;#34;&lt;/span>&lt;span style="color:#268bd2">$1&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> 2&amp;gt;/dev/null | awk -v &lt;span style="color:#268bd2">file&lt;/span>&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span>&lt;span style="color:#268bd2">$1&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#2aa198">&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> BEGIN {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> malloc=0;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> free=0;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> queueCreate=0;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> queueDestroy=0;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> notifierCreate=0;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> notifierDestroy=0;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> handleCreate=0;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> handleDestroy=0;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> /cnrtMalloc\(/ { malloc++; }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> /cnrtFree\(/ { free++; }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> /cnrtQueueCreate\(/ { queueCreate++; }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> /cnrtCreateQueue\(/ { queueCreate++; }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> /cnrtDestroyQueue\(/ { queueDestroy++; }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> /cnrtQueueDestroy\(/ { queueDestroy++; }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> /cnrtCreateNotifier\(/ { notifierCreate++; }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> /cnrtDestroyNotifier\(/ { notifierDestroy++; }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> /cnnlCreate\(/ { handleCreate++; }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> /cnnlDestroy\(/ { handleDestroy++; }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> END {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> if (malloc != free) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> print &amp;#34;file: &amp;#34; file &amp;#34;, malloc: &amp;#34; malloc &amp;#34;, free: &amp;#34; free
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> if (queueCreate != queueDestroy) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> print &amp;#34;file: &amp;#34; file &amp;#34;, queueCreate: &amp;#34; queueCreate &amp;#34;, queueDestroy: &amp;#34; queueDestroy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> if (notifierCreate != notifierDestroy) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> print &amp;#34;file: &amp;#34; file &amp;#34;, notifierCreate: &amp;#34; notifierCreate &amp;#34;, notifierDestroy: &amp;#34; notifierDestroy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> if (handleCreate != handleDestroy) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> print &amp;#34;file: &amp;#34; file &amp;#34;, handleCreate: &amp;#34; handleCreate &amp;#34;, handleDestroy: &amp;#34; handleDestroy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2aa198"> }&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>check &lt;span style="color:#268bd2">$1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="find_malloc_allsh">find_malloc_all.sh
&lt;a class="header-anchor" href="#find_malloc_allsh">&lt;/a>
&lt;/h1>&lt;p>要点：使用 &lt;code>find&lt;/code> 匹配时应该选择正则表达式类型，同时和 Python 的 &lt;code>re&lt;/code> 模块一样要全字符串匹配（不能匹配只部分字符，因此想只匹配中间部分的时候，就要在两边加上 &lt;code>.*&lt;/code>）。&lt;/p></description></item><item><title>bash 行编辑</title><link>https://hxhue.github.io/posts/cli/bash/bash-%E8%A1%8C%E7%BC%96%E8%BE%91/</link><pubDate>Fri, 02 Feb 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/cli/bash/bash-%E8%A1%8C%E7%BC%96%E8%BE%91/</guid><description>&lt;p>默认的是 emacs 模式的行编辑。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>ctrl _ yank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ctrl y yank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ctrl / undo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt f word-level forward
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt b word-level backward
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt d word-level delete 这个可能会更好用，因为 d 按键更近
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt backspace word-level backspace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>bash 数字大小比较</title><link>https://hxhue.github.io/posts/cli/bash/bash-%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F%E6%AF%94%E8%BE%83/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/cli/bash/bash-%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F%E6%AF%94%E8%BE%83/</guid><description>&lt;p>对于整数，可以用 &lt;code>[[]]&lt;/code> 和 &lt;code>(())&lt;/code> 来比较。&lt;/p>
&lt;p>对于浮点数，可以用 bc，但是 bc 不是每个环境都有。&lt;/p>
&lt;p>还有一种方法是 perl（如果装了 perl 但是没有装 bc）：&lt;code>perl -e &amp;quot;exit(1) if not $a &amp;gt; $b&amp;quot;&lt;/code>，这样可以用返回值标志是否成功。&lt;/p></description></item><item><title>bash 语法总结</title><link>https://hxhue.github.io/posts/cli/bash/bash-%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 21 Jan 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/cli/bash/bash-%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</guid><description>&lt;h1 id="重新加载-path-中的可执行文件">重新加载 PATH 中的可执行文件
&lt;a class="header-anchor" href="#%e9%87%8d%e6%96%b0%e5%8a%a0%e8%bd%bd-path-%e4%b8%ad%e7%9a%84%e5%8f%af%e6%89%a7%e8%a1%8c%e6%96%87%e4%bb%b6">&lt;/a>
&lt;/h1>&lt;p>&lt;code>hash -r&lt;/code>：用于解决在 PATH 中加入可执行文件后找不到的情况。&lt;/p>
&lt;h1 id="用--匹配多级目录find-不能匹配双星号">用 &lt;code>**&lt;/code> 匹配多级目录（&lt;code>find&lt;/code> 不能匹配双星号）
&lt;a class="header-anchor" href="#%e7%94%a8--%e5%8c%b9%e9%85%8d%e5%a4%9a%e7%ba%a7%e7%9b%ae%e5%bd%95find-%e4%b8%8d%e8%83%bd%e5%8c%b9%e9%85%8d%e5%8f%8c%e6%98%9f%e5%8f%b7">&lt;/a>
&lt;/h1>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">shopt&lt;/span> -s globstar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b58900">set&lt;/span> +o pipefail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clang-tidy -p build/ ./&lt;span style="color:#719e07">{&lt;/span>src,include&lt;span style="color:#719e07">}&lt;/span>/**/*.&lt;span style="color:#719e07">{&lt;/span>h,hpp,cc,cpp,cu&lt;span style="color:#719e07">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一句是打开 &lt;code>**&lt;/code> 选项，第二句是忽略 pipefail（&lt;code>-o&lt;/code> 和 &lt;code>+o&lt;/code> 相反）不然第三句的 pipe 可能出错，第三句 &lt;code>2&amp;gt;/dev/null&lt;/code> 是忽略错误信息。&lt;/p></description></item><item><title>bash 中的 BASH_SOURCE</title><link>https://hxhue.github.io/posts/cli/bash/bash-%E4%B8%AD%E7%9A%84-BASH_SOURCE/</link><pubDate>Mon, 11 Dec 2023 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/cli/bash/bash-%E4%B8%AD%E7%9A%84-BASH_SOURCE/</guid><description>&lt;p>这个变量表示 bash 真正的入口程序。这个变量的必要性体现在 source 某个 bash 脚本的时候 &lt;code>$0&lt;/code> 不能准确反映入口程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">&lt;/span>&lt;span style="color:#b58900">echo&lt;/span> &lt;span style="color:#2aa198">&amp;#34;[&lt;/span>&lt;span style="color:#268bd2">$0&lt;/span>&lt;span style="color:#2aa198">] vs. [&lt;/span>&lt;span style="color:#2aa198">${&lt;/span>&lt;span style="color:#268bd2">BASH_SOURCE&lt;/span>[0]&lt;span style="color:#2aa198">}&lt;/span>&lt;span style="color:#2aa198">]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ bash ./foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">[&lt;/span>./foo&lt;span style="color:#719e07">]&lt;/span> vs. &lt;span style="color:#719e07">[&lt;/span>./foo&lt;span style="color:#719e07">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">[&lt;/span>./foo&lt;span style="color:#719e07">]&lt;/span> vs. &lt;span style="color:#719e07">[&lt;/span>./foo&lt;span style="color:#719e07">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ . ./foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">[&lt;/span>bash&lt;span style="color:#719e07">]&lt;/span> vs. &lt;span style="color:#719e07">[&lt;/span>./foo&lt;span style="color:#719e07">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考 &lt;a href="https://stackoverflow.com/a/35006505/" title="https://stackoverflow.com/a/35006505/" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://stackoverflow.com/a/35006505/&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a>&lt;/p></description></item><item><title>bash 文件描述符</title><link>https://hxhue.github.io/posts/cli/bash/bash-%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</link><pubDate>Sat, 02 Dec 2023 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/cli/bash/bash-%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</guid><description>&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#b58900">echo&lt;/span> A &amp;gt;&amp;amp;&lt;span style="color:#2aa198">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-bash: 3: Bad file descriptor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#b58900">echo&lt;/span> A 3&amp;gt;&amp;amp;&lt;span style="color:#2aa198">2&lt;/span> &amp;gt;&amp;amp;3|grep &lt;span style="color:#2aa198">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一行输出给描述符 3 相关的文件，但是没有这个文件，所以出错。&lt;/p>
&lt;p>第二行把描述符 3 分配给了原先 2 的文件，然后又将输出导入到描述符 3 对应的文件中，也就是将结果输出到 stderr 中，所以 grep 8 不能拦截 echo 的输出（可以看到 A 被打印出来了）。&lt;/p></description></item><item><title>bash 下不用转义符打印红色字符串</title><link>https://hxhue.github.io/posts/cli/bash/bash-%E4%B8%8B%E4%B8%8D%E7%94%A8%E8%BD%AC%E4%B9%89%E7%AC%A6%E6%89%93%E5%8D%B0%E7%BA%A2%E8%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Sat, 11 Nov 2023 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/cli/bash/bash-%E4%B8%8B%E4%B8%8D%E7%94%A8%E8%BD%AC%E4%B9%89%E7%AC%A6%E6%89%93%E5%8D%B0%E7%BA%A2%E8%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>&lt;p>给一个必定匹配的模式让 grep 打印所有行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>... | grep -E &lt;span style="color:#2aa198">&amp;#39;(^|pattern)&amp;#39;&lt;/span> --color&lt;span style="color:#719e07">=&lt;/span>always
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>bash 配置</title><link>https://hxhue.github.io/posts/cli/bash/bash-%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/cli/bash/bash-%E9%85%8D%E7%BD%AE/</guid><description>&lt;h1 id="bash-的两个配置文件">bash 的两个配置文件
&lt;a class="header-anchor" href="#bash-%e7%9a%84%e4%b8%a4%e4%b8%aa%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6">&lt;/a>
&lt;/h1>&lt;p>login 时只加载 &lt;code>.bash_profile&lt;/code>（如果存在），其他时候只加载 &lt;code>.bashrc&lt;/code>。&lt;/p>
&lt;p>最好是把内容放在 &lt;code>.bashrc&lt;/code>，然后让 ~/.bash_profile 去 &lt;code>source ~/.bashrc&lt;/code>。&lt;/p>
&lt;p>虽然 &lt;code>~/.bashrc&lt;/code> 是所有非登陆的 bash 都会读，但默认的 &lt;code>~/.bashrc&lt;/code> 的开头检查了当前是否为交互终端，如果不是则退出。如果非要绕过这个限制，可以强制一个终端为交互终端：&lt;code>bash -i&lt;/code>。&lt;/p></description></item></channel></rss>