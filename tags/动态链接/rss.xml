<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>动态链接 on Bluegill</title><link>https://hxhue.github.io/tags/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/</link><description>Recent content in 动态链接 on Bluegill</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 19 Apr 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://hxhue.github.io/tags/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/rss.xml" rel="self" type="application/rss+xml"/><item><title>动态链接原理</title><link>https://hxhue.github.io/posts/systems/Linux/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%8E%9F%E7%90%86/</link><pubDate>Sat, 05 Apr 2025 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/systems/Linux/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%8E%9F%E7%90%86/</guid><description>&lt;h1 id="阶段">阶段
&lt;a class="header-anchor" href="#%e9%98%b6%e6%ae%b5">&lt;/a>
&lt;/h1>&lt;ul>
&lt;li>静态编辑&lt;/li>
&lt;li>动态加载&lt;/li>
&lt;li>延迟绑定&lt;/li>
&lt;/ul>
&lt;h1 id="一静态编辑">一、静态编辑
&lt;a class="header-anchor" href="#%e4%b8%80%e9%9d%99%e6%80%81%e7%bc%96%e8%be%91">&lt;/a>
&lt;/h1>&lt;p>链接器（ld）在生成可执行文件时，会记录可执行文件所依赖的共享库的名称以及需要的符号，并将这些信息存储在特定的段中（例如 .dynamic 段）。同时，它会创建 PLT（Procedure Linkage Table，过程链接表）和 GOT（Global Offset Table，全局偏移表）作为占位符，用于后续的动态链接过程。GOT 表初始时包含的是用于延迟绑定的地址，而非实际的函数地址。&lt;/p></description></item><item><title>能不能解释一下 Linux 中的 IFUNC 机制？</title><link>https://hxhue.github.io/01-llm-generated/%E8%83%BD%E4%B8%8D%E8%83%BD%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B-Linux-%E4%B8%AD%E7%9A%84-IFUNC-%E6%9C%BA%E5%88%B6/</link><pubDate>Sat, 05 Apr 2025 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/01-llm-generated/%E8%83%BD%E4%B8%8D%E8%83%BD%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B-Linux-%E4%B8%AD%E7%9A%84-IFUNC-%E6%9C%BA%E5%88%B6/</guid><description>&lt;div class="markdown-alert markdown-alert-caution">
 &lt;p class="markdown-alert-title">&lt;svg class="octicon octicon-stop mr-2" viewBox="0 0 16 16" width="16" height="16"
 aria-hidden="true">
 &lt;path
 d="M4.47.22A.749.749 0 0 1 5 0h6c.199 0 .389.079.53.22l4.25 4.25c.141.14.22.331.22.53v6a.749.749 0 0 1-.22.53l-4.25 4.25A.749.749 0 0 1 11 16H5a.749.749 0 0 1-.53-.22L.22 11.53A.749.749 0 0 1 0 11V5c0-.199.079-.389.22-.53Zm.84 1.28L1.5 5.31v5.38l3.81 3.81h5.38l3.81-3.81V5.31L10.69 1.5ZM8 4a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 4Zm0 8a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z">
 &lt;/path>
 &lt;/svg>Caution&lt;/p>
 &lt;p>由 gemini-2.0-flash-001 生成。&lt;/p>
&lt;/div>&lt;p>我们来解释一下 Linux 中的 IFUNC (Indirect Function) 机制，以及它与 PLT 的关系。&lt;/p></description></item><item><title>GCC 的 -fno-plt 选项</title><link>https://hxhue.github.io/01-llm-generated/GCC-%E7%9A%84-fno-plt-%E9%80%89%E9%A1%B9/</link><pubDate>Fri, 04 Apr 2025 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/01-llm-generated/GCC-%E7%9A%84-fno-plt-%E9%80%89%E9%A1%B9/</guid><description>&lt;div class="markdown-alert markdown-alert-caution">
 &lt;p class="markdown-alert-title">&lt;svg class="octicon octicon-stop mr-2" viewBox="0 0 16 16" width="16" height="16"
 aria-hidden="true">
 &lt;path
 d="M4.47.22A.749.749 0 0 1 5 0h6c.199 0 .389.079.53.22l4.25 4.25c.141.14.22.331.22.53v6a.749.749 0 0 1-.22.53l-4.25 4.25A.749.749 0 0 1 11 16H5a.749.749 0 0 1-.53-.22L.22 11.53A.749.749 0 0 1 0 11V5c0-.199.079-.389.22-.53Zm.84 1.28L1.5 5.31v5.38l3.81 3.81h5.38l3.81-3.81V5.31L10.69 1.5ZM8 4a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 4Zm0 8a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z">
 &lt;/path>
 &lt;/svg>Caution&lt;/p>
 &lt;p>由 gemini-2.5-pro-exp-03-25 生成。&lt;/p>
&lt;/div>&lt;h1 id="gcc-的--fno-plt-是什么含义">gcc 的 &lt;code>-fno-plt&lt;/code> 是什么含义？
&lt;a class="header-anchor" href="#gcc-%e7%9a%84--fno-plt-%e6%98%af%e4%bb%80%e4%b9%88%e5%90%ab%e4%b9%89">&lt;/a>
&lt;/h1>&lt;p>&lt;code>-fno-plt&lt;/code> 是 GCC 编译器的一个选项，它与程序如何处理函数调用相关，特别是对共享库函数的调用。&lt;/p></description></item></channel></rss>