<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Libcxx on Bluegill</title><link>https://hxhue.github.io/tags/libcxx/</link><description>Recent content in Libcxx on Bluegill</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 19 Apr 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://hxhue.github.io/tags/libcxx/rss.xml" rel="self" type="application/rss+xml"/><item><title>libstdc++ 和 libc++ 中字符串倍增比较</title><link>https://hxhue.github.io/posts/programming/cpp/libstdc++-%E5%92%8C-libc++-%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%80%8D%E5%A2%9E%E6%AF%94%E8%BE%83/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/programming/cpp/libstdc++-%E5%92%8C-libc++-%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%80%8D%E5%A2%9E%E6%AF%94%E8%BE%83/</guid><description>&lt;p>&lt;a href="https://godbolt.org/z/n8hns47M8" title="https://godbolt.org/z/n8hns47M8" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://godbolt.org/z/n8hns47M8&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">#include&lt;/span> &lt;span style="color:#719e07">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#719e07">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">#include&lt;/span> &lt;span style="color:#719e07">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#719e07">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dc322f">int&lt;/span> &lt;span style="color:#268bd2">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>string str &lt;span style="color:#719e07">=&lt;/span> &lt;span style="color:#2aa198">&amp;#34;hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;String: &lt;/span>&lt;span style="color:#cb4b16">\&amp;#34;&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;&lt;/span>&lt;span style="color:#cb4b16">\&amp;#34;&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Length: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str.&lt;span style="color:#268bd2">length&lt;/span>() &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Capacity: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str.&lt;span style="color:#268bd2">capacity&lt;/span>() &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Size: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#719e07">sizeof&lt;/span>(str) &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> str &lt;span style="color:#719e07">+=&lt;/span> &lt;span style="color:#2aa198">&amp;#34; world!。。。。&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;&lt;/span>&lt;span style="color:#cb4b16">\n&lt;/span>&lt;span style="color:#2aa198">String: &lt;/span>&lt;span style="color:#cb4b16">\&amp;#34;&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;&lt;/span>&lt;span style="color:#cb4b16">\&amp;#34;&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Length: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str.&lt;span style="color:#268bd2">length&lt;/span>() &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Capacity: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str.&lt;span style="color:#268bd2">capacity&lt;/span>() &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Size: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#719e07">sizeof&lt;/span>(str) &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> str &lt;span style="color:#719e07">+=&lt;/span> str;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;&lt;/span>&lt;span style="color:#cb4b16">\n&lt;/span>&lt;span style="color:#2aa198">String: &lt;/span>&lt;span style="color:#cb4b16">\&amp;#34;&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;&lt;/span>&lt;span style="color:#cb4b16">\&amp;#34;&lt;/span>&lt;span style="color:#2aa198">&amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Length: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str.&lt;span style="color:#268bd2">length&lt;/span>() &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Capacity: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> str.&lt;span style="color:#268bd2">capacity&lt;/span>() &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#719e07">::&lt;/span>cout &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#2aa198">&amp;#34;Size: &amp;#34;&lt;/span> &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#719e07">sizeof&lt;/span>(str) &lt;span style="color:#719e07">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#719e07">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#719e07">return&lt;/span> &lt;span style="color:#2aa198">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到 libstdc++ 中的 capacity 的增长方式是 15 → 30 → 60。一开始 SSO 缓冲区只能容纳 16 个字符，最后一个字符是 &lt;code>'\0'&lt;/code>，因此初始状态下只能容纳 15 个非空字符，capacity 为 15。而后面倍增的时候会直接按照非 &lt;code>'\0'&lt;/code> 字符的最大容量来做倍增，而非按照实际缓冲区容量做倍增（即 15 → 31 → 63 这样的路径）。&lt;/p></description></item><item><title>libc++ 和 libstdc++ 中 basic_string 的 SSO 比较</title><link>https://hxhue.github.io/posts/programming/cpp/libc++-%E5%92%8C-libstdc++-%E4%B8%AD-basic_string-%E7%9A%84-SSO-%E6%AF%94%E8%BE%83/</link><pubDate>Sat, 13 Apr 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/posts/programming/cpp/libc++-%E5%92%8C-libstdc++-%E4%B8%AD-basic_string-%E7%9A%84-SSO-%E6%AF%94%E8%BE%83/</guid><description>&lt;h1 id="参考">参考
&lt;a class="header-anchor" href="#%e5%8f%82%e8%80%83">&lt;/a>
&lt;/h1>&lt;p>&lt;a href="https://joellaity.com/2020/01/31/string.html" title="https://joellaity.com/2020/01/31/string.html" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://joellaity.com/2020/01/31/string.html&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a>&lt;/p>
&lt;p>&lt;code>std::string&lt;/code> 是 &lt;code>std::basic_string&amp;lt;&amp;gt;&lt;/code> 的一个特化，该类的 &lt;code>value_type&lt;/code> 是 char。本文虽然是讨论 &lt;code>std::basic_string&amp;lt;&amp;gt;&lt;/code> 的实现方式，但是为了方便，&lt;strong>假设 &lt;code>value_type&lt;/code> 是 &lt;code>char&lt;/code>、假设目标平台是 64 位&lt;/strong>，讨论时也将把 &lt;code>std::basic_string&amp;lt;&amp;gt;&lt;/code> 和 &lt;code>std::string&lt;/code> 互用。&lt;/p></description></item></channel></rss>