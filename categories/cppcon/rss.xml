<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cppcon on Bluegill</title><link>https://hxhue.github.io/categories/cppcon/</link><description>Recent content in Cppcon on Bluegill</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Fri, 31 Jan 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://hxhue.github.io/categories/cppcon/rss.xml" rel="self" type="application/rss+xml"/><item><title>(CppCon 2023) Great C++ is_trivial</title><link>https://hxhue.github.io/cppcon-talks/CppCon-2023-Great-C++-is_trivial/</link><pubDate>Fri, 05 Apr 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/cppcon-talks/CppCon-2023-Great-C++-is_trivial/</guid><description>&lt;h1 id="写在前面">写在前面
&lt;a class="header-anchor" href="#%e5%86%99%e5%9c%a8%e5%89%8d%e9%9d%a2">&lt;/a>
&lt;/h1>&lt;p>参考链接 &lt;a href="https://www.youtube.com/watch?v=bpF1LKQBgBQ" title="https://www.youtube.com/watch?v=bpF1LKQBgBQ" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://www.youtube.com/watch?v=bpF1LKQBgBQ&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a>&lt;/p>
&lt;p>这篇演讲有关 C++ 中的 &lt;em>trivial&lt;/em> 概念。并且提到当对象 trivially copyable 时，参数传递和返回值都会变得更容易优化。&lt;/p>
&lt;h1 id="返回值优化">返回值优化
&lt;a class="header-anchor" href="#%e8%bf%94%e5%9b%9e%e5%80%bc%e4%bc%98%e5%8c%96">&lt;/a>
&lt;/h1>&lt;p>






&lt;img src="https://hxhue.github.io/assets/CppCon%202023%20Great%20C++%20is_trivial-20240408000238783.webp">&lt;/p>
&lt;p>第 2 段代码在 C++20 之前不能被优化是因为结构化绑定的分量是结构体的一部分，作为返回值时不能被直接建在调用者的栈上。&lt;/p></description></item><item><title>(CppCon 2023) C++ Memory Model - from C++11 to C++23 - Alex Dathskovsky</title><link>https://hxhue.github.io/cppcon-talks/CppCon-2023-C++-Memory-Model-from-C++11-to-C++23-Alex-Dathskovsky/</link><pubDate>Fri, 22 Mar 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/cppcon-talks/CppCon-2023-C++-Memory-Model-from-C++11-to-C++23-Alex-Dathskovsky/</guid><description>&lt;p>视频链接 &lt;a href="https://www.youtube.com/watch?v=SVEYNEWZLo4" title="https://www.youtube.com/watch?v=SVEYNEWZLo4" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://www.youtube.com/watch?v=SVEYNEWZLo4&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a>&lt;/p>
&lt;h1 id="不要用-volatile-来同步">不要用 Volatile 来同步
&lt;a class="header-anchor" href="#%e4%b8%8d%e8%a6%81%e7%94%a8-volatile-%e6%9d%a5%e5%90%8c%e6%ad%a5">&lt;/a>
&lt;/h1>&lt;div class="markdown-alert markdown-alert-note">
 &lt;p class="markdown-alert-title">&lt;svg class="octicon octicon-info mr-2" viewBox="0 0 16 16" width="16" height="16"
 aria-hidden="true">
 &lt;path
 d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z">
 &lt;/path>
 &lt;/svg>Note&lt;/p></description></item><item><title>(CppCon 2018) 105 STL Algorithms in Less Than an Hour</title><link>https://hxhue.github.io/cppcon-talks/CppCon-2018-105-STL-Algorithms-in-Less-Than-an-Hour/</link><pubDate>Tue, 05 Mar 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/cppcon-talks/CppCon-2018-105-STL-Algorithms-in-Less-Than-an-Hour/</guid><description>&lt;ol>
&lt;li>为了简单，下面都不用 &lt;code>std&lt;/code> 名字空间了。而且实际上 &lt;code>begin&lt;/code> 和 &lt;code>end&lt;/code> 是有 ADL 的。&lt;/li>
&lt;li>有一些算法是在 &lt;code>numeric&lt;/code> 头文件中的。&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=2olsGf6JIkU" title="https://www.youtube.com/watch?v=2olsGf6JIkU" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://www.youtube.com/watch?v=2olsGf6JIkU&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a>&lt;/p>
&lt;h1 id="1-not-classified-2">1 Not Classified (2)
&lt;a class="header-anchor" href="#1-not-classified-2">&lt;/a>
&lt;/h1>&lt;pre>&lt;code>1. transform
&lt;/code>&lt;/pre>
&lt;p>






&lt;img src="https://hxhue.github.io/assets/84fcaeff404297d9e7af540b6eb1f8fc.webp">&lt;/p>
&lt;p>下面这种重载有点像先 zip 再 transform，但是没有 zip 灵活。&lt;/p></description></item><item><title>(CppCon 2023) Lock-free Atomic Shared Pointers Without a Split Reference Count</title><link>https://hxhue.github.io/cppcon-talks/CppCon-2023-Lock-free-Atomic-Shared-Pointers-Without-a-Split-Reference-Count/</link><pubDate>Tue, 05 Mar 2024 00:00:00 +0800</pubDate><guid>https://hxhue.github.io/cppcon-talks/CppCon-2023-Lock-free-Atomic-Shared-Pointers-Without-a-Split-Reference-Count/</guid><description>&lt;p>&lt;a href="https://youtu.be/lNPZV9Iqo3U?si=lS1hf2ND4SS-6ELB" title="https://youtu.be/lNPZV9Iqo3U?si=lS1hf2ND4SS-6ELB" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://youtu.be/lNPZV9Iqo3U?si=lS1hf2ND4SS-6ELB&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a> by Daniel Anderson&lt;/p>
&lt;p>幻灯片链接： &lt;a href="https://raw.githubusercontent.com/CppCon/CppCon2023/main/Presentations/lock_free_atomic_shared_ptr_cppcon2023.pptx" title="https://raw.githubusercontent.com/CppCon/CppCon2023/main/Presentations/lock_free_atomic_shared_ptr_cppcon2023.pptx" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://raw.githubusercontent.com/CppCon/CppCon2023/main/Presentations/lock_free_atomic_shared_ptr_cppcon2023.pptx&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a>&lt;/p>
&lt;h1 id="共享指针是线程安全的吗">共享指针是线程安全的吗？
&lt;a class="header-anchor" href="#%e5%85%b1%e4%ba%ab%e6%8c%87%e9%92%88%e6%98%af%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%9a%84%e5%90%97">&lt;/a>
&lt;/h1>&lt;p>&lt;code>std::shared_ptr&lt;/code> 的控制块是线程安全的（其实也就是析构是线程安全的， &lt;a href="https://en.cppreference.com/w/cpp/memory/shared_ptr/atomic2" title="https://en.cppreference.com/w/cpp/memory/shared_ptr/atomic2" rel="noopener external nofollow noreferrer"
 target="_blank" class=" exturl" >https://en.cppreference.com/w/cpp/memory/shared_ptr/atomic2&lt;i class="fa fa-external-link-alt">&lt;/i>&lt;/a> 中有 “&lt;em>Note that the control block of a &lt;code>shared_ptr&lt;/code> is thread-safe&amp;hellip;&lt;/em>” 这句话），但是：&lt;/p></description></item></channel></rss>